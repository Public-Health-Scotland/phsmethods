[{"path":"https://public-health-scotland.github.io/phsmethods/articles/chi-operations.html","id":"checking-and-correcting-chi-numbers","dir":"Articles","previous_headings":"","what":"Checking and correcting CHI numbers","title":"Working with CHI numbers","text":"first thing working CHI numbers unknown quality check validity. phsmethods provides function easily : chi_check() - function expects character vector (1 ), return value CHI number letting know ’s valid, isn’t issue .","code":"chi_numbers <- c(   \"0211165794\",   \"9999999999\",   \"402070763\",   \"00402070763\",   \"0101010000\",   \"Missing CHI\",   NA,   \"\" )  library(phsmethods)  chi_check(chi_numbers) #> [1] \"Valid CHI\"                    \"Invalid date\"                 #> [3] \"Too few characters\"           \"Too many characters\"          #> [5] \"Invalid checksum\"             \"Invalid character(s) present\" #> [7] \"Missing (NA)\"                 \"Missing (Blank)\""},{"path":"https://public-health-scotland.github.io/phsmethods/articles/chi-operations.html","id":"cleaning-up-bad-chi-numbers","dir":"Articles","previous_headings":"Checking and correcting CHI numbers","what":"Cleaning up bad CHI numbers","title":"Working with CHI numbers","text":"Usually, CHI variable data. looks like one CHI numbers ‘402070763’ might just lost leading zero, common occurrence data passed Excel point. can fix specific issue chi_pad(). larger dataset, might useful get count issues rather seeing per CHI. Now knowledge options. option take depend type purpose analysis well many CHI numbers issues. Go back data source/provider try fix erroneous CHI numbers. Set NA keep rest data. Filter data invalid CHIs completely.","code":"library(dplyr)  data <- tibble(chi = c(   \"0211165794\",   \"9999999999\",   \"402070763\",   \"00402070763\",   \"0101010000\",   \"Missing CHI\",   NA,   \"\" )) fixed_data <- data %>%   mutate(chi = chi_pad(chi))  checked_data <- fixed_data %>%   mutate(valid_chi = chi_check(chi))  checked_data #> # A tibble: 8 × 2 #>   chi           valid_chi                    #>   <chr>         <chr>                        #> 1 \"0211165794\"  Valid CHI                    #> 2 \"9999999999\"  Invalid date                 #> 3 \"0402070763\"  Valid CHI                    #> 4 \"00402070763\" Too many characters          #> 5 \"0101010000\"  Invalid checksum             #> 6 \"Missing CHI\" Invalid character(s) present #> 7  NA           Missing (NA)                 #> 8 \"\"            Missing (Blank) fixed_data %>%   count(valid_chi = chi_check(chi), sort = TRUE) #> # A tibble: 7 × 2 #>   valid_chi                        n #>   <chr>                        <int> #> 1 Valid CHI                        2 #> 2 Invalid character(s) present     1 #> 3 Invalid checksum                 1 #> 4 Invalid date                     1 #> 5 Missing (Blank)                  1 #> 6 Missing (NA)                     1 #> 7 Too many characters              1 fixed_data %>%   mutate(chi = if_else(chi_check(chi) != \"Valid CHI\", NA_character_, chi)) #> # A tibble: 8 × 1 #>   chi        #>   <chr>      #> 1 0211165794 #> 2 NA         #> 3 0402070763 #> 4 NA         #> 5 NA         #> 6 NA         #> 7 NA         #> 8 NA  fixed_data %>%   filter(chi_check(chi) == \"Valid CHI\") #> # A tibble: 2 × 1 #>   chi        #>   <chr>      #> 1 0211165794 #> 2 0402070763"},{"path":"https://public-health-scotland.github.io/phsmethods/articles/chi-operations.html","id":"inferring-data-from-a-chi-number","dir":"Articles","previous_headings":"","what":"Inferring data from a CHI number","title":"Working with CHI numbers","text":"ideal world, always supplementary data Date Birth, Age Sex alongside CHI number, however, often work data CHI number demographic variables either completely missing incomplete. checked (necessary) padded CHI numbers, can try extract information .","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/articles/chi-operations.html","id":"the-structure-of-a-chi-number","dir":"Articles","previous_headings":"Inferring data from a CHI number","what":"The structure of a CHI number","title":"Working with CHI numbers","text":"explained Wikipedia article CHI number constructed follows: * first 6 digits patient’s Date Birth format DDMMYY. * Digits 7 8 random. * 9th number indicates patient’s sex - odd male, even female. * final, 10th, digit (Modulus-11) ‘check digit’ - helps guard transcription errors, example, someone makes typo unlikely check digit still valid.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/articles/chi-operations.html","id":"extracting-sex-from-chi","dir":"Articles","previous_headings":"Inferring data from a CHI number","what":"Extracting sex from CHI","title":"Working with CHI numbers","text":"sex_from_chi() can extract infer extract patient’s sex. default, function first check CHI validity return NA CHI invalid. already checked CHI previous step can useful use chi_check = FALSE faster. default sex returned integer ‘1’ representing ‘Male’ ‘2’ representing ‘Female’, consistent coding sex PHS datasets. can sex returned factor using as_factor = TRUE, default levels ‘1’ ‘2’ labels ‘Male’ ‘Female’ can useful, particularly visualising data.","code":"data <- tibble(   chi = c(\"0101011237\", \"0211165794\", \"0402070763\", \"0101336489\", \"1904851231\", \"2902960018\") )  # Confirm all of the CHIs are valid count(data, chi_check(chi)) #> # A tibble: 1 × 2 #>   `chi_check(chi)`     n #>   <chr>            <int> #> 1 Valid CHI            6  data_sex <- data %>%   mutate(sex = sex_from_chi(chi, chi_check = FALSE)) data_sex #> # A tibble: 6 × 2 #>   chi          sex #>   <chr>      <int> #> 1 0101011237     1 #> 2 0211165794     1 #> 3 0402070763     2 #> 4 0101336489     2 #> 5 1904851231     1 #> 6 2902960018     1 data_sex <- data_sex %>%   mutate(sex_factor = sex_from_chi(chi, as_factor = TRUE))  data_sex #> # A tibble: 6 × 3 #>   chi          sex sex_factor #>   <chr>      <int> <fct>      #> 1 0101011237     1 Male       #> 2 0211165794     1 Male       #> 3 0402070763     2 Female     #> 4 0101336489     2 Female     #> 5 1904851231     1 Male       #> 6 2902960018     1 Male library(ggplot2)  data_sex %>%   ggplot(aes(y = \"\", fill = sex_factor)) +   geom_bar() +   coord_polar() +   labs(title = \"Count of Male vs Female\", x = \"\", y = \"\") +   scale_fill_brewer(\"Sex (from CHI)\", type = \"qual\") +   theme_minimal()"},{"path":"https://public-health-scotland.github.io/phsmethods/articles/chi-operations.html","id":"extracting-date-of-birth-from-chi","dir":"Articles","previous_headings":"Inferring data from a CHI number","what":"Extracting Date of Birth from CHI","title":"Working with CHI numbers","text":"usually possible definitively infer patient’s Date Birth CHI number, CHI contains 2 digits year. Looking first 6 digits CHI number ‘010120’ ‘1 January 1920’ ‘1 January 2020’. However, extra context, can usually eliminate one possibilities, example 2023 know CHI numbers form ‘DDMM24’ etc. must mean 1924 since can’t 2024. function dob_from_chi() try extract Date Birth return NA date ambiguous. need provide context able work still missing dates. Often working historical data, instance, know data 2015 know patients must born earlier . can use min_date max_date arguments provide context. min_date usually information data, latest possible date CHI born. max_date default today’s date, usually common sense date latest date ’d expect. instance, working childhood vaccine data use Sys.Date() - lubridate::years(16), imply don’t expect anyone older 16 today’s date. Usually, event dates e.g. admission date alongside data can used instead , conjunction fixed date.","code":"data_dob <- data %>%   mutate(dob = dob_from_chi(chi)) #> ! 3 CHI numbers produced ambiguous dates and will be given \"NA\" for their Dates #>   of Birth. #> ✔ Try different values for `min_date` and/or `max_date`.  data_dob #> # A tibble: 6 × 2 #>   chi        dob        #>   <chr>      <date>     #> 1 0101011237 NA         #> 2 0211165794 NA         #> 3 0402070763 NA         #> 4 0101336489 1933-01-01 #> 5 1904851231 1985-04-19 #> 6 2902960018 1996-02-29 # Expect no one born after 2015-12-31 data %>%   mutate(dob = dob_from_chi(chi, max_date = as.Date(\"2015-12-31\"))) #> ! 2 CHI numbers produced ambiguous dates and will be given \"NA\" for their Dates #>   of Birth. #> ✔ Try different values for `min_date` and/or `max_date`. #> # A tibble: 6 × 2 #>   chi        dob        #>   <chr>      <date>     #> 1 0101011237 NA         #> 2 0211165794 1916-11-02 #> 3 0402070763 NA         #> 4 0101336489 1933-01-01 #> 5 1904851231 1985-04-19 #> 6 2902960018 1996-02-29  # Expect no one born before 1999-12-31 i.e. 16 years before our data started. data %>%   mutate(dob = dob_from_chi(     chi,     max_date = as.Date(\"2015-12-31\"),     min_date = as.Date(\"2015-12-31\") - lubridate::years(16)   )) #> ! 4 CHI numbers produced ambiguous dates and will be given \"NA\" for their Dates #>   of Birth. #> ✔ Try different values for `min_date` and/or `max_date`. #> # A tibble: 6 × 2 #>   chi        dob        #>   <chr>      <date>     #> 1 0101011237 2001-01-01 #> 2 0211165794 NA         #> 3 0402070763 2007-02-04 #> 4 0101336489 NA         #> 5 1904851231 NA         #> 6 2902960018 NA data <- data %>%   mutate(event_date = as.Date(c(     \"2015-01-01\",     \"2014-01-01\",     \"2013-01-01\",     \"2012-01-01\",     \"2011-01-01\",     \"2010-01-01\"   )))  # Using the event date as the maximum date data %>%   mutate(dob = dob_from_chi(chi, max_date = event_date)) #> ! 2 CHI numbers produced ambiguous dates and will be given \"NA\" for their Dates #>   of Birth. #> ✔ Try different values for `min_date` and/or `max_date`. #> # A tibble: 6 × 3 #>   chi        event_date dob        #>   <chr>      <date>     <date>     #> 1 0101011237 2015-01-01 NA         #> 2 0211165794 2014-01-01 1916-11-02 #> 3 0402070763 2013-01-01 NA         #> 4 0101336489 2012-01-01 1933-01-01 #> 5 1904851231 2011-01-01 1985-04-19 #> 6 2902960018 2010-01-01 1996-02-29  # Setting a 'fixed' minimum date as well as using the event date data_dob <- data %>%   mutate(dob = dob_from_chi(     chi,     max_date = event_date,     min_date = as.Date(\"1915-01-01\")   ))  data_dob #> # A tibble: 6 × 3 #>   chi        event_date dob        #>   <chr>      <date>     <date>     #> 1 0101011237 2015-01-01 2001-01-01 #> 2 0211165794 2014-01-01 1916-11-02 #> 3 0402070763 2013-01-01 2007-02-04 #> 4 0101336489 2012-01-01 1933-01-01 #> 5 1904851231 2011-01-01 1985-04-19 #> 6 2902960018 2010-01-01 1996-02-29"},{"path":"https://public-health-scotland.github.io/phsmethods/articles/chi-operations.html","id":"extracting-age-from-chi","dir":"Articles","previous_headings":"Inferring data from a CHI number","what":"Extracting age from CHI","title":"Working with CHI numbers","text":"function age_from_chi() provides simpler interface just extracting patient’s age CHI number. background, uses dob_from_chi() allows specify min_age max_age, usually conceptually simpler trying work dates. lose amount fine control though, sometimes necessary use dob_from_chi() age_calculate(). Note age calculated today’s date unless otherwise specified ref_date argument. get different results depending context supply.","code":"data %>%   mutate(age = age_from_chi(chi)) #> ! 3 CHI numbers produced ambiguous dates and will be given \"NA\" for their Dates #>   of Birth. #> ✔ Try different values for `min_age` and/or `max_age`. #> # A tibble: 6 × 3 #>   chi        event_date   age #>   <chr>      <date>     <dbl> #> 1 0101011237 2015-01-01    NA #> 2 0211165794 2014-01-01    NA #> 3 0402070763 2013-01-01    NA #> 4 0101336489 2012-01-01    92 #> 5 1904851231 2011-01-01    40 #> 6 2902960018 2010-01-01    29  # Work out age at a fixed date data %>%   mutate(age = age_from_chi(chi, ref_date = as.Date(\"2016-01-01\"))) #> ! 2 CHI numbers produced ambiguous dates and will be given \"NA\" for their Dates #>   of Birth. #> ✔ Try different values for `min_age` and/or `max_age`. #> # A tibble: 6 × 3 #>   chi        event_date   age #>   <chr>      <date>     <dbl> #> 1 0101011237 2015-01-01    NA #> 2 0211165794 2014-01-01    99 #> 3 0402070763 2013-01-01    NA #> 4 0101336489 2012-01-01    83 #> 5 1904851231 2011-01-01    30 #> 6 2902960018 2010-01-01    19  # Work out age at a relative date data %>%   mutate(age = age_from_chi(chi, ref_date = event_date)) #> ! 2 CHI numbers produced ambiguous dates and will be given \"NA\" for their Dates #>   of Birth. #> ✔ Try different values for `min_age` and/or `max_age`. #> # A tibble: 6 × 3 #>   chi        event_date   age #>   <chr>      <date>     <dbl> #> 1 0101011237 2015-01-01    NA #> 2 0211165794 2014-01-01    97 #> 3 0402070763 2013-01-01    NA #> 4 0101336489 2012-01-01    79 #> 5 1904851231 2011-01-01    25 #> 6 2902960018 2010-01-01    13 data %>%   mutate(age = age_from_chi(chi, ref_date = event_date, max_age = 18)) #> ! 3 CHI numbers produced ambiguous dates and will be given \"NA\" for their Dates #>   of Birth. #> ✔ Try different values for `min_age` and/or `max_age`. #> # A tibble: 6 × 3 #>   chi        event_date   age #>   <chr>      <date>     <dbl> #> 1 0101011237 2015-01-01    14 #> 2 0211165794 2014-01-01    NA #> 3 0402070763 2013-01-01     5 #> 4 0101336489 2012-01-01    NA #> 5 1904851231 2011-01-01    NA #> 6 2902960018 2010-01-01    13  data %>%   mutate(age = age_from_chi(     chi,     ref_date = event_date,     min_age = 60,     max_age = 120   )) #> ! 2 CHI numbers produced ambiguous dates and will be given \"NA\" for their Dates #>   of Birth. #> ✔ Try different values for `min_age` and/or `max_age`. #> # A tibble: 6 × 3 #>   chi        event_date   age #>   <chr>      <date>     <dbl> #> 1 0101011237 2015-01-01   114 #> 2 0211165794 2014-01-01    97 #> 3 0402070763 2013-01-01   105 #> 4 0101336489 2012-01-01    79 #> 5 1904851231 2011-01-01    NA #> 6 2902960018 2010-01-01    NA  data %>%   mutate(age = age_from_chi(     chi,     min_age = 60,     max_age = 120   )) #> ! 3 CHI numbers produced ambiguous dates and will be given \"NA\" for their Dates #>   of Birth. #> ✔ Try different values for `min_age` and/or `max_age`. #> # A tibble: 6 × 3 #>   chi        event_date   age #>   <chr>      <date>     <dbl> #> 1 0101011237 2015-01-01    NA #> 2 0211165794 2014-01-01   108 #> 3 0402070763 2013-01-01   118 #> 4 0101336489 2012-01-01    92 #> 5 1904851231 2011-01-01    NA #> 6 2902960018 2010-01-01    NA"},{"path":"https://public-health-scotland.github.io/phsmethods/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Public Health Scotland. Copyright holder. David Caldwell. Author. Lucinda Lawrie. Reviewer. Jack Hannah. Author. Tina Fu. Author, maintainer. Ciara Gribben. Author. Chris Deans. Author. Jaime Villacampa. Author. Graeme Gowans. Author. Alice Byers. Contributor. Alan Yeung. Contributor. James Hayes. Author. Nicolaos Christofidis. Author.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Caldwell D, Hannah J, Fu T, Gribben C, Deans C, Villacampa J, Gowans G, Hayes J, Christofidis N (2025). phsmethods: Standard Methods Use Public Health Scotland. R package version 1.0.2.9000, https://github.com/Public-Health-Scotland/phsmethods.","code":"@Manual{,   title = {phsmethods: Standard Methods for Use in Public Health Scotland},   author = {David Caldwell and Jack Hannah and Tina Fu and Ciara Gribben and Chris Deans and Jaime Villacampa and Graeme Gowans and James Hayes and Nicolaos Christofidis},   year = {2025},   note = {R package version 1.0.2.9000},   url = {https://github.com/Public-Health-Scotland/phsmethods}, }"},{"path":"https://public-health-scotland.github.io/phsmethods/index.html","id":"phsmethods","dir":"","previous_headings":"","what":"Standard Methods for Use in Public Health Scotland","title":"Standard Methods for Use in Public Health Scotland","text":"phsmethods contains functions commonly undertaken analytical tasks Public Health Scotland (PHS): create_age_groups() categorises ages groups. chi_check() assesses validity CHI number. chi_pad() adds leading zero nine-digit CHI numbers. sex_from_chi() extracts sex person CHI number. extract_fin_year() assigns date financial year format YYYY/YY. match_area() converts geography codes area names. format_postcode() formats improperly recorded postcodes. qtr(), qtr_end(), qtr_next() qtr_prev() assign date quarter. age_calculate() calculates age two dates. dob_from_chi() extracts Date Birth (DoB) CHI number. age_from_chi() extracts age CHI number. phsmethods can used PHS server desktop versions RStudio.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Standard Methods for Use in Public Health Scotland","text":"using PHS Posit Workbench default repository PHS Posit Package Manager, benefit phsmethods listed can install : install phsmethods directly GitHub, package remotes required, can installed install.packages(\"remotes\"). can install phsmethods GitHub : However, network security settings may prevent remotes::install_github() working RStudio desktop. case, phsmethods can installed downloading zip repository running following code (replacing section marked <>, including arrows ):","code":"install.packages(\"phsmethods\") remotes::install_github(\"Public-Health-Scotland/phsmethods\") remotes::install_local(\"<FILEPATH OF ZIPPED FILE>/phsmethods-master.zip\",   upgrade = \"never\" )"},{"path":"https://public-health-scotland.github.io/phsmethods/index.html","id":"using-phsmethods","dir":"","previous_headings":"","what":"Using phsmethods","title":"Standard Methods for Use in Public Health Scotland","text":"Load phsmethods using library(): see documentation phsmethods’ functions, type ?function_name RStudio console loading package: can access full list functions help pages Reference page pkgdown website. able see examples function. also useful PHS Methods -line training course gives interactive way learn package.","code":"library(phsmethods) ?extract_fin_year ?format_postcode"},{"path":"https://public-health-scotland.github.io/phsmethods/index.html","id":"contributing-to-phsmethods","dir":"","previous_headings":"","what":"Contributing to phsmethods","title":"Standard Methods for Use in Public Health Scotland","text":"present, maintainer package Tina Fu. package intended continuous development contributions may made anyone within PHS. like contribute, please first create issue GitHub assign package maintainers . ensure duplication effort occurs case multiple people idea. package maintainers discuss issue get back soon possible. obvious eye-catching (well intimidating) way contributing writing function, isn’t way make useful contribution. Fixing typos documentation, example, isn’t glamorous way contribute, great help package maintainers. Please see blog post Jim Hester information getting started contributing open-source software. contributing, please create branch repository carry work . Please ensure linked RStudio GitHub account using usethis::edit_git_config() prior making contribution. ready review, please create pull request assign package maintainers reviewers. One conduct review, provide feedback , necessary, request changes merging branch. Please mindful information governance contributing package. data files (aside publicly available downloadable datasets unless explicitly approved), server connection details, passwords person identifiable otherwise confidential information included anywhere within package repository (whether public private) used within PHS. includes within code code commentary. information security using git GitHub, using git GitHub version control generally, please see Transforming Publishing Programme’s Git guide GitHub guidance. Please feel free add ‘Authors’ section Description file contributing. rule thumb, please assign role author (\"aut\") writing exported function, contributor (\"ctb\") anything else. phsmethods , much possible, adhere tidyverse style guide rOpenSci package development guide. pertinent points take : function names lower case, words separated underscore Put space comma, never Put space infix operators <-, == + Limit code 80 characters per line Function documentation generated using roxygen2 functions tested using testthat package always pass devtools::check() ’s necessary experience GitHub building R package contribute phsmethods. wish contribute code , long can write R function, package maintainers can assist error handling, writing documentation, testing aspects package development. advised, however, consult Hadley Wickham’s R Packages book prior making contribution. may also useful consult documentation tests existing functions within package point reference. Please note README may fail ‘Knit’ times result network security settings. likely due badges package’s release version, continuous integration status test coverage top document. make edits .Rmd version, can knit , GitHub action run knit open pull request.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/age_calculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate age between two dates — age_calculate","title":"Calculate age between two dates — age_calculate","text":"function calculates age two dates using functions lubridate. calculates age either years months.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/age_calculate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate age between two dates — age_calculate","text":"","code":"age_calculate(   start,   end = if (lubridate::is.Date(start)) Sys.Date() else Sys.time(),   units = c(\"years\", \"months\"),   round_down = TRUE )"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/age_calculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate age between two dates — age_calculate","text":"start start date (e.g. date birth) must supplied Date POSIXct POSIXlt class. base::.Date(), lubridate::dmy() .POSIXct() examples functions can used store dates appropriate class. end end date must supplied Date POSIXct POSIXlt class. Default Sys.Date() Sys.time() depending class start. units Type units used. years months accepted. Default years. round_down returned ages rounded nearest whole number. Default TRUE.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/age_calculate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate age between two dates — age_calculate","text":"numeric vector representing ages given units.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/age_calculate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate age between two dates — age_calculate","text":"","code":"library(lubridate) #>  #> Attaching package: ‘lubridate’ #> The following objects are masked from ‘package:base’: #>  #>     date, intersect, setdiff, union birth_date <- lubridate::ymd(\"2020-02-29\") end_date <- lubridate::ymd(\"2022-02-21\") age_calculate(birth_date, end_date) #> [1] 1 age_calculate(birth_date, end_date, units = \"months\") #> [1] 23  # If the start day is leap day (February 29th), age increases on 1st March # every year. leap1 <- lubridate::ymd(\"2020-02-29\") leap2 <- lubridate::ymd(\"2022-02-28\") leap3 <- lubridate::ymd(\"2022-03-01\")  age_calculate(leap1, leap2) #> [1] 1 age_calculate(leap1, leap3) #> [1] 2"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/age_from_chi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract age from the CHI number — age_from_chi","title":"Extract age from the CHI number — age_from_chi","text":"age_from_chi takes CHI number vector CHI numbers returns age implied CHI number(s). Date Birth (DoB) ambiguous return NA. uses dob_from_chi().","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/age_from_chi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract age from the CHI number — age_from_chi","text":"","code":"age_from_chi(   chi_number,   ref_date = NULL,   min_age = 0L,   max_age = NULL,   chi_check = TRUE )"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/age_from_chi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract age from the CHI number — age_from_chi","text":"chi_number CHI number vector CHI numbers character class. ref_date calculate age date, default use Sys.Date() .e. today. min_age, max_age optional min /max dates DoB take century needs guessed. Must either length 1 'fixed' age length chi_number age per CHI number. min_age can age based common sense dataset, whilst max_age can age event happens age discharge. chi_check logical, optionally skip checking CHI validity faster used previously checked CHI(s), default (TRUE) check CHI numbers.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/age_from_chi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract age from the CHI number — age_from_chi","text":"integer vector ages years truncated nearest year. length chi_number.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/age_from_chi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract age from the CHI number — age_from_chi","text":"","code":"age_from_chi(\"0101336489\") #> [1] 92  library(tibble) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data <- tibble(chi = c(   \"0101336489\",   \"0101405073\",   \"0101625707\" ), dis_date = as.Date(c(   \"1950-01-01\",   \"2000-01-01\",   \"2020-01-01\" )))  data %>%   mutate(chi_age = age_from_chi(chi)) #> # A tibble: 3 × 3 #>   chi        dis_date   chi_age #>   <chr>      <date>       <dbl> #> 1 0101336489 1950-01-01      92 #> 2 0101405073 2000-01-01      85 #> 3 0101625707 2020-01-01      63  data %>%   mutate(chi_age = age_from_chi(chi, min_age = 18, max_age = 65)) #> ! 2 CHI numbers produced ambiguous dates and will be given \"NA\" for their Dates #>   of Birth. #> ✔ Try different values for `min_age` and/or `max_age`. #> # A tibble: 3 × 3 #>   chi        dis_date   chi_age #>   <chr>      <date>       <dbl> #> 1 0101336489 1950-01-01      NA #> 2 0101405073 2000-01-01      NA #> 3 0101625707 2020-01-01      63  data %>%   mutate(chi_age = age_from_chi(chi,     ref_date = dis_date   )) #> # A tibble: 3 × 3 #>   chi        dis_date   chi_age #>   <chr>      <date>       <dbl> #> 1 0101336489 1950-01-01      17 #> 2 0101405073 2000-01-01      60 #> 3 0101625707 2020-01-01      58"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/area_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Codes and names of Scottish geographical and administrative areas. — area_lookup","title":"Codes and names of Scottish geographical and administrative areas. — area_lookup","text":"dataset containing Scotland's geography codes associated area names. used within match_area().","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/area_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Codes and names of Scottish geographical and administrative areas. — area_lookup","text":"","code":"area_lookup"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/area_lookup.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Codes and names of Scottish geographical and administrative areas. — area_lookup","text":"tibble::tibble() 2 variables 17,000 rows: geo_code Standard geography code - 9 characters area_name Name area code represents","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/area_lookup.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Codes and names of Scottish geographical and administrative areas. — area_lookup","text":"https://statistics.gov.scot/","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/area_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Codes and names of Scottish geographical and administrative areas. — area_lookup","text":"geo_code contains geography codes pertaining Health Boards, Council Areas, Health Social Care Partnerships, Intermediate Zones, Data Zones (2001 2011), Electoral Wards, Scottish Parliamentary Constituencies, UK Parliamentary Constituencies, Travel work areas, National Parks, Community Health Partnerships, Localities (S19), Settlements (S20) Scotland.","code":""},{"path":[]},{"path":"https://public-health-scotland.github.io/phsmethods/reference/chi_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of a CHI number — chi_check","title":"Check the validity of a CHI number — chi_check","text":"chi_check takes CHI number vector CHI numbers character class. returns feedback validity entered CHI number , found invalid, provides explanation .","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/chi_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of a CHI number — chi_check","text":"","code":"chi_check(x)"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/chi_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of a CHI number — chi_check","text":"x CHI number vector CHI numbers character class.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/chi_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the validity of a CHI number — chi_check","text":"chi_check returns character string. Depending validity entered CHI number, return one following: Valid CHI Invalid character(s) present many characters characters Invalid date Invalid checksum Missing (NA) Missing (Blank)","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/chi_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check the validity of a CHI number — chi_check","text":"Community Health Index (CHI) register patients NHS Scotland. CHI number unique, ten-digit identifier assigned patient index. first six digits CHI number patient's date birth DD/MM/YY format. ninth digit CHI number identifies patient's sex: odd male, even female. tenth digit check digit, denoted checksum. CHI number made exclusively numeric digits, stored numeric class R. leading zeros numeric values silently dropped, practice exclusive R. reason, chi_check accepts input values character class . leading zero can added nine-digit CHI number using chi_pad(). chi_check assesses whether entered CHI number valid checking whether answer following criteria Yes: contain non-numeric characters? ten digits length? first six digits denote valid date? checksum digit correct?","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/chi_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the validity of a CHI number — chi_check","text":"","code":"chi_check(\"0101011237\") #> [1] \"Valid CHI\" chi_check(c(\"0101201234\", \"3201201234\")) #> [1] \"Invalid checksum\" \"Invalid date\"      library(dplyr) df <- tibble(chi = c(   \"3213201234\",   \"123456789\",   \"12345678900\",   \"010120123?\",   NA )) df %>%   mutate(validity = chi_check(chi)) #> # A tibble: 5 × 2 #>   chi         validity                     #>   <chr>       <chr>                        #> 1 3213201234  Invalid date                 #> 2 123456789   Too few characters           #> 3 12345678900 Too many characters          #> 4 010120123?  Invalid character(s) present #> 5 NA          Missing (NA)"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/chi_pad.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a leading zero to nine-digit CHI numbers — chi_pad","title":"Add a leading zero to nine-digit CHI numbers — chi_pad","text":"chi_pad takes nine-digit CHI number character class prefixes zero. values provided string comprised nine numeric digits remain unchanged.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/chi_pad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a leading zero to nine-digit CHI numbers — chi_pad","text":"","code":"chi_pad(x)"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/chi_pad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a leading zero to nine-digit CHI numbers — chi_pad","text":"x CHI number vector CHI numbers character class.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/chi_pad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a leading zero to nine-digit CHI numbers — chi_pad","text":"original character vector CHI numbers padded applicable.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/chi_pad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a leading zero to nine-digit CHI numbers — chi_pad","text":"Community Health Index (CHI) register patients NHS Scotland. CHI number unique, ten-digit identifier assigned patient index. first six digits CHI number patient's date birth DD/MM/YY format. first digit CHI number must, therefore, 3 less. Depending source, CHI numbers sometimes missing leading zero. CHI number made exclusively numeric digits, stored numeric class R. leading zeros numeric values silently dropped, practice exclusive R. reason, chi_pad accepts input values character class , returns values class. assess validity CHI number - please see chi_check() .","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/chi_pad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a leading zero to nine-digit CHI numbers — chi_pad","text":"","code":"chi_pad(c(\"101011237\", \"101201234\")) #> [1] \"0101011237\" \"0101201234\""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/create_age_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Create age groups — create_age_groups","title":"Create age groups — create_age_groups","text":"create_age_groups() takes numeric vector assigns age appropriate age group.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/create_age_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create age groups — create_age_groups","text":"","code":"create_age_groups(x, from = 0, to = 90, by = 5, as_factor = FALSE)"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/create_age_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create age groups — create_age_groups","text":"x vector numeric values start smallest age group. default 0. end point age groups. default 90. size age groups. default 5. as_factor default behaviour return character vector. Use TRUE return factor vector instead.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/create_age_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create age groups — create_age_groups","text":"character vector, element age group corresponding element x. as_factor = TRUE, factor vector returned instead.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/create_age_groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create age groups — create_age_groups","text":", values used create distinct age groups. dictates starting age lowest age group, indicates wide group . stipulates cut-point ages equal greater value categorised together + group. specified value multiple , value rounded nearest multiple . default values , correspond European Standard Population age groups.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/create_age_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create age groups — create_age_groups","text":"","code":"age <- c(54, 7, 77, 1, 26, 101)  create_age_groups(age) #> [1] \"50-54\" \"5-9\"   \"75-79\" \"0-4\"   \"25-29\" \"90+\"   create_age_groups(age, from = 0, to = 80, by = 10) #> [1] \"50-59\" \"0-9\"   \"70-79\" \"0-9\"   \"20-29\" \"80+\"    # Final group may start below 'to' create_age_groups(age, from = 0, to = 65, by = 10) #> [1] \"50-59\" \"0-9\"   \"60+\"   \"0-9\"   \"20-29\" \"60+\"    # To get the output as a factor: create_age_groups(age, as_factor = TRUE) #> [1] 50-54 5-9   75-79 0-4   25-29 90+   #> 19 Levels: 0-4 < 5-9 < 10-14 < 15-19 < 20-24 < 25-29 < 30-34 < ... < 90+"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/dob_from_chi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Date of Birth (DoB) from the CHI number — dob_from_chi","title":"Extract Date of Birth (DoB) from the CHI number — dob_from_chi","text":"dob_from_chi takes CHI number vector CHI numbers returns Date Birth (DoB) implied CHI number(s). DoB ambiguous return NA.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/dob_from_chi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Date of Birth (DoB) from the CHI number — dob_from_chi","text":"","code":"dob_from_chi(chi_number, min_date = NULL, max_date = NULL, chi_check = TRUE)"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/dob_from_chi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Date of Birth (DoB) from the CHI number — dob_from_chi","text":"chi_number CHI number vector CHI numbers character class. min_date, max_date optional min /max dates DoB take century needs guessed. Must either length 1 'fixed' date length chi_number date per CHI number. min_date can date based common sense dataset, whilst max_date can date event happens discharge date. chi_check logical, optionally skip checking CHI validity faster used previously checked CHI(s). default (TRUE) check CHI numbers.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/dob_from_chi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Date of Birth (DoB) from the CHI number — dob_from_chi","text":"date vector DoB. length chi_number.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/dob_from_chi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Date of Birth (DoB) from the CHI number — dob_from_chi","text":"","code":"dob_from_chi(\"0101336489\") #> [1] \"1933-01-01\"  library(tibble) library(dplyr) data <- tibble(chi = c(   \"0101336489\",   \"0101405073\",   \"0101625707\" ), adm_date = as.Date(c(   \"1950-01-01\",   \"2000-01-01\",   \"2020-01-01\" )))  data %>%   mutate(chi_dob = dob_from_chi(chi)) #> # A tibble: 3 × 3 #>   chi        adm_date   chi_dob    #>   <chr>      <date>     <date>     #> 1 0101336489 1950-01-01 1933-01-01 #> 2 0101405073 2000-01-01 1940-01-01 #> 3 0101625707 2020-01-01 1962-01-01  data %>%   mutate(chi_dob = dob_from_chi(chi,     min_date = as.Date(\"1930-01-01\"),     max_date = adm_date   )) #> # A tibble: 3 × 3 #>   chi        adm_date   chi_dob    #>   <chr>      <date>     <date>     #> 1 0101336489 1950-01-01 1933-01-01 #> 2 0101405073 2000-01-01 1940-01-01 #> 3 0101625707 2020-01-01 1962-01-01"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/extract_fin_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the formatted financial year from a date — extract_fin_year","title":"Extract the formatted financial year from a date — extract_fin_year","text":"extract_fin_year takes date extracts correct financial year PHS specified format .","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/extract_fin_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the formatted financial year from a date — extract_fin_year","text":"","code":"extract_fin_year(date)"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/extract_fin_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the formatted financial year from a date — extract_fin_year","text":"date date must supplied Date, POSIXct, POSIXlt POSIXt class. base::.Date(), lubridate::dmy() .POSIXct() examples functions can used store dates appropriate class.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/extract_fin_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the formatted financial year from a date — extract_fin_year","text":"character vector financial years form '2017/18'.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/extract_fin_year.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the formatted financial year from a date — extract_fin_year","text":"PHS accepted format financial year YYYY/YY e.g. 2017/18.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/extract_fin_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the formatted financial year from a date — extract_fin_year","text":"","code":"x <- lubridate::dmy(c(21012017, 04042017, 17112017)) extract_fin_year(x) #> [1] \"2016/17\" \"2017/18\" \"2017/18\""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/file_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate file size — file_size","title":"Calculate file size — file_size","text":"file_size takes filepath optional regular expression pattern. returns size files within directory match given pattern.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/file_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate file size — file_size","text":"","code":"file_size(filepath = getwd(), pattern = NULL)"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/file_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate file size — file_size","text":"filepath character string denoting filepath. Defaults working directory, getwd(). pattern optional character string denoting regular expression() pattern. file names match regular expression returned. See See Also section resources regarding write regular expressions.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/file_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate file size — file_size","text":"tibble::tibble() listing names files within filepath match pattern respective sizes. column names tibble name size. pattern specified, file_size returns names sizes files within filepath. File names sizes returned alphabetical order file name. Sub-folders contained within filepath return file size 0 B. filepath empty folder, pattern matches files within filepath, file_size returns NULL.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/file_size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate file size — file_size","text":"sizes files certain extensions returned type file prefixed. example, size 12 KB .xlsx file returned Excel 12 KB. complete list explicitly catered-file extensions prefixes follows: .xls, .xlsb, .xlsm .xlsx files prefixed Excel .csv files prefixed CSV .sav .zsav files prefixed SPSS .doc, .docm .docx files prefixed Word .rds files prefixed RDS .txt files prefixed Text, .fst files prefixed FST, .pdf files prefixed PDF, .tsv files prefixed TSV, .html files prefixed HTML, .ppt, .pptm .pptx files prefixed PowerPoint, .md files prefixed Markdown Files extensions contained within list size returned prefix. request certain extension explicitly catered , please create issue GitHub. File sizes returned appropriate multiple unit byte (bytes (B), kilobytes (KB), megabytes (MB), etc.). multiple taken 1,024 units preceding denomination.","code":""},{"path":[]},{"path":"https://public-health-scotland.github.io/phsmethods/reference/file_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate file size — file_size","text":"","code":"# Name and size of all files in working directory file_size() #> Warning: `file_size()` was deprecated in phsmethods 1.1.0. #> ℹ We think it is redundant, but if you still have a need for this function, #>   please get in touch. #> # A tibble: 10 × 2 #>    name                   size       #>    <chr>                  <chr>      #>  1 age_calculate.html     HTML 12 kB #>  2 age_from_chi.html      HTML 16 kB #>  3 area_lookup.html       HTML 7 kB  #>  4 chi_check.html         HTML 12 kB #>  5 chi_pad.html           HTML 8 kB  #>  6 create_age_groups.html HTML 10 kB #>  7 dob_from_chi.html      HTML 13 kB #>  8 extract_fin_year.html  HTML 7 kB  #>  9 figures                4 kB       #> 10 index.html             HTML 6 kB   # Name and size of .xlsx files only in working directory file_size(pattern = \"\\\\.xlsx$\") #> Warning: `file_size()` was deprecated in phsmethods 1.1.0. #> ℹ We think it is redundant, but if you still have a need for this function, #>   please get in touch. #> NULL  # Size only of alphabetically first file in working directory library(magrittr) file_size() %>%   dplyr::pull(size) %>%   magrittr::extract(1) #> Warning: `file_size()` was deprecated in phsmethods 1.1.0. #> ℹ We think it is redundant, but if you still have a need for this function, #>   please get in touch. #> [1] \"HTML 12 kB\""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/format_postcode.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a postcode — format_postcode","title":"Format a postcode — format_postcode","text":"format_postcode takes character string vector character strings. extracts input values adhere standard UK postcode format (without spaces), assigns appropriate amount spacing (pc7 pc8 formats) ensures letters capitalised.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/format_postcode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a postcode — format_postcode","text":"","code":"format_postcode(x, format = c(\"pc7\", \"pc8\"), quiet = FALSE)"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/format_postcode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a postcode — format_postcode","text":"x character string vector character strings. Input values adhere standard UK postcode format may upper lower case formatted regardless existing spacing. input values adhere standard UK postcode format generate NA warning message - see Value section information. format character string denoting desired output format. Valid options pc7 pc8. default pc7. See Value section information string length output values. quiet (optional) quiet TRUE messages warnings suppressed. useful production context sure data specifically using function remove invalid postcodes. also make function bit quicker fewer checks performed.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/format_postcode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a postcode — format_postcode","text":"format set equal pc7, format_postcode returns character string length 7. 5 character postcodes two spaces 2nd character; 6 character postcodes 1 space 3rd character; 7 character postcodes spaces. format set equal pc8, format_postcode returns character string maximum length 8. postcodes, whether 5, 6 7 characters, one space last 3 characters. input values adhere standard UK postcode format generate NA output value warning message. warning generated rather error let one erroneously recorded postcode large input vector prevent remaining entries appropriately formatted. input values adhere standard UK postcode format contain lower case letters generate warning message explaining letters capitalised.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/format_postcode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format a postcode — format_postcode","text":"standard UK postcode format (without spaces) : 1 2 letters, followed 1 number, followed 1 optional letter number, followed 1 number, followed 2 letters UK government regulations mandate letters numbers can used specific sections postcode. However, regulations liable change time. reason, format_postcode validate whether given postcode actually exists, whether specific numbers letters used appropriate places. assesses whether given input consistent format , , assigns appropriate amount spacing capitalises lower case letters.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/format_postcode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a postcode — format_postcode","text":"","code":"format_postcode(\"G26QE\") #> [1] \"G2  6QE\" format_postcode(c(\"KA89NB\", \"PA152TY\"), format = \"pc8\") #> [1] \"KA8 9NB\"  \"PA15 2TY\"  library(dplyr) df <- tibble(postcode = c(\"G429BA\", \"G207AL\", \"DD37JY\", \"DG98BS\")) df %>%   mutate(postcode = format_postcode(postcode)) #> # A tibble: 4 × 1 #>   postcode #>   <chr>    #> 1 G42 9BA  #> 2 G20 7AL  #> 3 DD3 7JY  #> 4 DG9 8BS"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/match_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate geography codes into area names — match_area","title":"Translate geography codes into area names — match_area","text":"match_area takes geography code vector geography codes. matches input corresponding value area_lookup() dataset returns corresponding area name.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/match_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate geography codes into area names — match_area","text":"","code":"match_area(x)"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/match_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate geography codes into area names — match_area","text":"x geography code vector geography codes.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/match_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate geography codes into area names — match_area","text":"geography code within Scotland unique, consequently match_area returns single area name input value. input value without corresponding value area_lookup() dataset return NA output value.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/match_area.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Translate geography codes into area names — match_area","text":"match_area relies predominantly standard 9 digit geography codes. exceptions : RA2701: Fixed Abode RA2702: Rest UK (Outside Scotland) RA2703: Outside UK RA2704: Unknown Residency match_area caters current previous versions geography codes (e.g 2014 2019 Health Boards). can account geography codes pertaining Health Boards, Council Areas, Health Social Care Partnerships, Intermediate Zones, Data Zones (2001 2011), Electoral Wards, Scottish Parliamentary Constituencies, UK Parliamentary Constituencies, Travel work areas, National Parks, Community Health Partnerships, Localities (S19), Settlements (S20) Scotland. match_area returns non-NA value exact match present input value corresponding variable area_lookup() dataset. exact matches sensitive case spacing. advised inspect area_lookup() case unexpected results, may explained subtle differences transcription input value corresponding value lookup dataset.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/match_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate geography codes into area names — match_area","text":"","code":"match_area(\"S20000010\") #> [1] \"Eaglesham\"  library(dplyr) df <- tibble(code = c(\"S02000656\", \"S02001042\", \"S08000020\", \"S12000013\")) df %>% mutate(name = match_area(code)) #> # A tibble: 4 × 2 #>   code      name                #>   <chr>     <chr>               #> 1 S02000656 Govan and Linthouse #> 2 S02001042 Peebles North       #> 3 S08000020 Grampian            #> 4 S12000013 Na h-Eileanan Siar"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/phsmethods-package.html","id":null,"dir":"Reference","previous_headings":"","what":"phsmethods: Standard Methods for Use in Public Health Scotland — phsmethods-package","title":"phsmethods: Standard Methods for Use in Public Health Scotland — phsmethods-package","text":"collection methods commonly undertaken analytical tasks, primarily developed Public Health Scotland (PHS) analysts, package also generally useful others working healthcare space, particularly since functions working Community Health Index (CHI) numbers. package can help make data manipulation analysis efficient reproducible.","code":""},{"path":[]},{"path":"https://public-health-scotland.github.io/phsmethods/reference/phsmethods-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"phsmethods: Standard Methods for Use in Public Health Scotland — phsmethods-package","text":"Maintainer: Tina Fu Yuyan.Fu2@phs.scot Authors: David Caldwell David.Caldwell@phs.scot Jack Hannah jack.hannah2@phs.scot Ciara Gribben Ciara.Gribben@phs.scot Chris Deans Chris.Deans2@phs.scot Jaime Villacampa Jaime.Villacampa@phs.scot Graeme Gowans Graeme.Gowans@phs.scot James Hayes James.Hayes2@phs.scot (ORCID) Nicolaos Christofidis nicolaos.christofidis@phs.scot contributors: Public Health Scotland phs.datascience@phs.scot [copyright holder] Lucinda Lawrie Lucinda.Lawrie@phs.scot [reviewer] Alice Byers [contributor] Alan Yeung Alan.Yeung@phs.scot [contributor]","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/qtr.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a date to a quarter — qtr","title":"Assign a date to a quarter — qtr","text":"qtr functions take date input calculate relevant quarter-related value . return year part value. qtr returns current quarter qtr_end returns last month quarter qtr_next returns next quarter qtr_prev returns previous quarter","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/qtr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a date to a quarter — qtr","text":"","code":"qtr(date, format = c(\"long\", \"short\"))  qtr_end(date, format = c(\"long\", \"short\"))  qtr_next(date, format = c(\"long\", \"short\"))  qtr_prev(date, format = c(\"long\", \"short\"))"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/qtr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign a date to a quarter — qtr","text":"date date must supplied Date POSIXct format character string specifying format quarter displayed . Valid options long (January March 2018) short (Jan-Mar 2018). default long.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/qtr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a date to a quarter — qtr","text":"character vector financial quarters specified format.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/qtr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign a date to a quarter — qtr","text":"Quarters defined : January March (Jan-Mar) April June (Apr-Jun) July September (Jul-Sep) October December (Oct-Dec)","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/qtr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign a date to a quarter — qtr","text":"","code":"x <- lubridate::dmy(c(26032012, 04052012, 23092012)) qtr(x) #> [1] \"January to March 2012\"  \"April to June 2012\"     \"July to September 2012\" qtr_end(x, format = \"short\") #> [1] \"Mar 2012\" \"Jun 2012\" \"Sep 2012\" qtr_next(x) #> [1] \"April to June 2012\"       \"July to September 2012\"   #> [3] \"October to December 2012\" qtr_prev(x, format = \"short\") #> [1] \"Oct-Dec 2011\" \"Jan-Mar 2012\" \"Apr-Jun 2012\""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions renamed in phsmethods 0.2.1 (Dec 2021) — rename","title":"Functions renamed in phsmethods 0.2.1 (Dec 2021) — rename","text":"phsmethods 0.2.1 renamed number functions improve code clarity. old functions longer work error. next update removed completely. postcode() → format_postcode() age_group() → create_age_groups() fin_year() → extract_fin_year()","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions renamed in phsmethods 0.2.1 (Dec 2021) — rename","text":"","code":"postcode(x, format = c(\"pc7\", \"pc8\"))  age_group(x, from = 0, to = 90, by = 5, as_factor = FALSE)  fin_year(date)"},{"path":[]},{"path":"https://public-health-scotland.github.io/phsmethods/reference/sex_from_chi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract sex from the CHI number — sex_from_chi","title":"Extract sex from the CHI number — sex_from_chi","text":"sex_from_chi takes CHI number vector CHI numbers returns sex implied CHI number(s). default return type integer can modified.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/sex_from_chi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract sex from the CHI number — sex_from_chi","text":"","code":"sex_from_chi(   chi_number,   male_value = 1L,   female_value = 2L,   as_factor = FALSE,   chi_check = TRUE )"},{"path":"https://public-health-scotland.github.io/phsmethods/reference/sex_from_chi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract sex from the CHI number — sex_from_chi","text":"chi_number CHI number vector CHI numbers character class. male_value, female_value optionally supply custom values Male Female. Note must class. as_factor logical, optionally return factor labels 'Male' 'Female'. Note override custom values supplied male_value female_value. chi_check logical, optionally skip checking CHI validity faster used previously checked CHI(s).","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/sex_from_chi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract sex from the CHI number — sex_from_chi","text":"vector class male_value female_value, (integer default) unless as_factor TRUE case factor returned.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/sex_from_chi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract sex from the CHI number — sex_from_chi","text":"Community Health Index (CHI) register patients NHS Scotland. CHI number unique, ten-digit identifier assigned patient index. ninth digit CHI number identifies patient's sex: odd men, even women. default behaviour sex_from_chi first check CHI number valid using check_chi return 1 male 2 female. options return custom values e.g. 'M' 'F' return factor labels 'Male' 'Female')","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/reference/sex_from_chi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract sex from the CHI number — sex_from_chi","text":"","code":"sex_from_chi(\"0101011237\") #> [1] 1 sex_from_chi(c(\"0101011237\", \"0101336489\", NA)) #> [1]  1  2 NA sex_from_chi(   c(\"0101011237\", \"0101336489\", NA),   male_value = \"M\",   female_value = \"F\" ) #> Using custom values: Male = \"M\", Female = \"F\" #> The return variable will be <character>. #> [1] \"M\" \"F\" NA  sex_from_chi(c(\"0101011237\", \"0101336489\", NA), as_factor = TRUE) #> [1] Male   Female <NA>   #> Levels: Male Female  library(dplyr) df <- tibble(chi = c(\"0101011237\", \"0101336489\", NA)) df %>% mutate(chi_sex = sex_from_chi(chi)) #> # A tibble: 3 × 2 #>   chi        chi_sex #>   <chr>        <int> #> 1 0101011237       1 #> 2 0101336489       2 #> 3 NA              NA"},{"path":"https://public-health-scotland.github.io/phsmethods/news/index.html","id":"phsmethods-development-version","dir":"Changelog","previous_headings":"","what":"phsmethods (development version)","title":"phsmethods (development version)","text":"file_size() deprecated believe longer relevant (#11). Please let us know still use , otherwise removed future version.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/news/index.html","id":"phsmethods-102-2024-01-05","dir":"Changelog","previous_headings":"","what":"phsmethods 1.0.2 (2024-01-05)","title":"phsmethods 1.0.2 (2024-01-05)","text":"CRAN release: 2024-01-08 user-facing changes. Fix tests age_from_chi() due helper function expected_age() caused tests fail new year comes. replaced fixed reference date.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/news/index.html","id":"phsmethods-101-2023-11-27","dir":"Changelog","previous_headings":"","what":"phsmethods 1.0.1 (2023-11-27)","title":"phsmethods 1.0.1 (2023-11-27)","text":"CRAN release: 2023-11-28 Fix bug extract_fin_year() make sure financial years displayed correctly 1999/20 2008/09. new article added documentation - Working CHI numbers.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/news/index.html","id":"phsmethods-100-2023-09-26","dir":"Changelog","previous_headings":"","what":"phsmethods 1.0.0 (2023-09-26)","title":"phsmethods 1.0.0 (2023-09-26)","text":"CRAN release: 2023-11-03 first new major release CRAN.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/news/index.html","id":"phsmethods-023-2023-09-11","dir":"Changelog","previous_headings":"","what":"phsmethods 0.2.3 (2023-09-11)","title":"phsmethods 0.2.3 (2023-09-11)","text":"{gdata} import dropped replaced {scales}. extract_fin_year() now much faster use less memory, especially smaller vectors (1 1,000). format_postcode() now faster also gains quiet parameter, default value FALSE setting TRUE skip checks messages, useful using format_postcode() ‘clean-’ format vector postcodes, rather wanting check . skipped checks quiet = TRUE also run faster. installation instructions README updated.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/news/index.html","id":"phsmethods-022-2022-11-14","dir":"Changelog","previous_headings":"","what":"phsmethods 0.2.2 (2022-11-14)","title":"phsmethods 0.2.2 (2022-11-14)","text":"Improved chi_check() make efficient run faster. Improved “Using phsmethods” section README shorter accessible. Update errors, warnings messages use {cli}. Improve errors giving incorrect types functions.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/news/index.html","id":"phsmethods-021-2022-02-11","dir":"Changelog","previous_headings":"","what":"phsmethods 0.2.1 (2022-02-11)","title":"phsmethods 0.2.1 (2022-02-11)","text":"Three functions renamed improve code clarity: postcode() format_postcode(); age_group() create_age_groups(); fin_year() extract_fin_year(). old functions still work produce warning. reasonable amount time, removed completely. New functions added: age_calculate()(#65, @Nic-chr); dob_from_chi()(#42, @Moohan); age_from_chi()(#42, @Moohan) Change output chi_check empty string (““) reports missing (#76)","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/news/index.html","id":"phsmethods-020-2020-04-17","dir":"Changelog","previous_headings":"","what":"phsmethods 0.2.0 (2020-04-17)","title":"phsmethods 0.2.0 (2020-04-17)","text":"New functions added: age_group()(#23, @chrisdeans); chi_check()(#30, @graemegowans); chi_pad()(#30, @graemegowans); match_area()(#13, @jvillacampa). first argument postcode() now x, opposed string. unlikely break much, , existing code. postcode() also now slightly faster. phsmethods longer imports stringi. phsmethods now depends version R >= 2.10. Jack Hannah longer maintainer.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/news/index.html","id":"phsmethods-011-2020-02-10","dir":"Changelog","previous_headings":"","what":"phsmethods 0.1.1 (2020-02-10)","title":"phsmethods 0.1.1 (2020-02-10)","text":"file_size(), fin_year(), qtr(), qtr_end(), qtr_next() qtr_prev() now use inherits(x, \"y\") instead class(x) == \"y\" check class. reasoning explained blogpost Martin Maechler. performance fin_year() improved. function now extracts unique date(s) input, calculates associated financial year(s), joins original input. contrast original method, directly calculated financial year input dates individually.","code":""},{"path":"https://public-health-scotland.github.io/phsmethods/news/index.html","id":"phsmethods-010-2020-01-24","dir":"Changelog","previous_headings":"","what":"phsmethods 0.1.0 (2020-01-24)","title":"phsmethods 0.1.0 (2020-01-24)","text":"Initial package release. file_size(), fin_year(), postcode(), qtr(), qtr_end(), qtr_next() qtr_prev() functions added.","code":""}]
