% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/percent.R
\docType{data}
\name{as_percent}
\alias{as_percent}
\alias{NA_percent_}
\title{Percentages}
\format{
An object of class \code{percent} of length 1.
}
\usage{
as_percent(x, digits = 2)

NA_percent_
}
\arguments{
\item{x}{\verb{[numeric]} vector of proportions.}

\item{digits}{\verb{[numeric(1)]} - The number of digits that will be used for
formatting. This is by default 2 and is applied whenever \code{format()},
\code{as.character()} and \code{print()} are called. This can also be controlled
directly via \code{format()}.}
}
\value{
An object of class \code{percent}.
}
\description{
\code{percent} is a lightweight S3 class allowing for pretty
printing of proportions as percentages. \cr
It aims to remove the need for creating character vectors of percentages.
}
\details{
\subsection{Rounding}{

The rounding for percent vectors differs to that of base R rounding,
namely in that halves are rounded up instead of rounded to even.
This means that \code{round(x)} will round the percent vector \code{x} using
halves-up rounding (like in the janitor package).
}

\subsection{Formatting}{

By default all percentages are formatted to 2 decimal places which can be
overwritten using \code{format()} or using \code{round()} if your required digits are
less than 2. It's worth noting that the digits argument in
\code{format.percent} uses decimal rounding instead of the usual
significant digit rounding that \code{format.default()} uses.
}
}
\examples{
# Convert proportions to percentages
as_percent(seq(0, 1, 0.1))

# You can use round() as usual
p <- as_percent(15.56 / 100)
round(p)
round(p, digits = 1)

p2 <- as_percent(0.0005)
signif(p2, 2)
floor(p2)
ceiling(p2)

# We can do basic math operations as usual

# Order of operations doesn't matter
10 * as_percent(c(0, 0.5, 2))
as_percent(c(0, 0.5, 2)) * 10

as_percent(0.1) + as_percent(0.2)

# Formatting options
format(as_percent(2.674 / 100), digits = 2, symbol = " (\%)")
# Prints nicely in data frames (and tibbles)
library(dplyr)
starwars \%>\%
  count(eye_color) \%>\%
  mutate(perc = as_percent(n / sum(n))) \%>\%
  arrange(desc(perc)) \%>\% # We can do numeric sorting with percent vectors
  mutate(perc_rounded = round(perc))
}
\keyword{datasets}
